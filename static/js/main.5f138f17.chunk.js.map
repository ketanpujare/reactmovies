{"version":3,"sources":["component/KNavBar.js","component/MovieTabs.js","App.js","serviceWorker.js","index.js"],"names":["NavBars","Navbar","bg","variant","Brand","href","Nav","className","Link","Form","inline","FormControl","type","placeholder","Button","Component","MovieTab","Col","xs","sm","lg","Image","src","this","props","img","rounded","movie","App","state","movieData","page","handleClick","bind","e","newpage","setState","i","movieItems","length","console","log","push","key","id","name","Container","Row","onClick","size","active","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8lEAwBeA,E,iLAnBP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,UACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,YAEJ,kBAACI,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASN,UAAU,YACxD,kBAACO,EAAA,EAAD,CAAQX,QAAQ,gBAAhB,iB,GAbFY,a,gBCkBPC,E,iLAfP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACpB,6BACI,kBAACC,EAAA,EAAD,CAAOC,IAAKC,KAAKC,MAAMC,IAAKC,SAAO,IACnC,4BAAKH,KAAKC,MAAMG,c,GAPjBZ,a,QCsDRa,E,YA9Cb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CACXF,MAAOG,EAAUH,MACjBI,KAAM,IAGR,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,yEAWPC,GAEV,IAAIC,EAAUZ,KAAKM,MAAME,KAAO,GAChCR,KAAKa,SAAS,CAAEL,KAAMI,M,+BAKtB,IACIE,EADAC,EAAa,GAKjB,IAAKD,EAAI,EAAGd,KAAKM,MAAME,KAAOM,GAAKd,KAAKM,MAAMF,MAAMY,OAASF,EAAGA,IAC9DG,QAAQC,IAAIJ,GACZC,EAAWI,KAAK,kBAAC,EAAD,CAAUC,IAAKpB,KAAKM,MAAMF,MAAMU,GAAGO,GAAIjB,MAAOJ,KAAKM,MAAMF,MAAMU,GAAGQ,KAAMpB,IAAKF,KAAKM,MAAMF,MAAMU,GAAGZ,OAInH,OACE,6BACE,kBAAC,EAAD,MACA,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK7C,GAAG,OAAOC,QAAQ,QACpBmC,IAGL,kBAACxB,EAAA,EAAD,CAAQkC,QAASzB,KAAKS,YAAa7B,QAAQ,UAAU8C,KAAK,KAAKC,QAAM,GAArE,uB,GAvCUnC,aCCEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5f138f17.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\n\nclass NavBars extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#features\">Features</Nav.Link>\n                        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                    </Nav>\n                    <Form inline>\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                        <Button variant=\"outline-info\">Search</Button>\n                    </Form>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default NavBars","import React, { Component } from 'react';\nimport { Col, Image } from 'react-bootstrap';\n\n\nclass MovieTab extends Component {\n    render() {\n        return (\n            <div>\n                <Col xs={12} sm={6} lg={4}>\n                    <div>\n                        <Image src={this.props.img} rounded />\n                        <h5>{this.props.movie}</h5>\n\n                    </div>\n                </Col>\n            </div>\n        );\n    }\n}\n\n\nexport default MovieTab;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Container, Row, Button } from 'react-bootstrap'\n\nimport NavBars from './component/KNavBar';\nimport MovieTab from './component/MovieTabs';\n\nimport movieData from './movieData.json';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: movieData.movie,\n      page: 12\n    }\n\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n\n  handleClick(e) {\n    // console.log(this.state)\n    let newpage = this.state.page + 12\n    this.setState({ page: newpage })\n  }\n\n\n  render() {\n    let movieItems = []\n    let i;\n    let counter = 0;\n    // console.log(this.state.page)\n\n    for (i = 0; this.state.page > i && this.state.movie.length > i; i++) {\n      console.log(i)\n      movieItems.push(<MovieTab key={this.state.movie[i].id} movie={this.state.movie[i].name} img={this.state.movie[i].img} />)\n    }\n\n\n    return (\n      <div>\n        <NavBars />\n        <Container>\n          <Row bg=\"dark\" variant=\"dark\">\n            {movieItems}\n          </Row>\n        </Container>\n        <Button onClick={this.handleClick} variant=\"primary\" size=\"lg\" active>\n          Primary button\n        </Button>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}